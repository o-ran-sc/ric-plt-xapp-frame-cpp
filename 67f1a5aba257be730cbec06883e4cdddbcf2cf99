{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "a1af1059_ae618c4c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1000108
      },
      "writtenOn": "2022-12-13T15:34:05Z",
      "side": 1,
      "message": "Any particular reason why there are no test cases included? If not, let\u0027s add. Would be good to have them, esp. considering that this is one of the components that is included in automatic CI and we can actually monitor for unit test coverage.",
      "revId": "67f1a5aba257be730cbec06883e4cdddbcf2cf99",
      "serverId": "84e4e190-e623-4c37-9eda-58b1937c1b53"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a787f3af_00d5f542",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1001476
      },
      "writtenOn": "2022-12-13T15:40:58Z",
      "side": 1,
      "message": "It would be difficult for me to add the unit test at this moment, as Iam blocked by other activities.\n\nCan we target the unit test in separate ticket in upcoming January month?\nIn that ticket we can also write the user guide also.",
      "parentUuid": "a1af1059_ae618c4c",
      "revId": "67f1a5aba257be730cbec06883e4cdddbcf2cf99",
      "serverId": "84e4e190-e623-4c37-9eda-58b1937c1b53"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bf6f5013_5ab4967e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1001476
      },
      "writtenOn": "2022-12-14T14:16:11Z",
      "side": 1,
      "message": "Suggestions by Anssi and Alexandre has been implemented",
      "revId": "67f1a5aba257be730cbec06883e4cdddbcf2cf99",
      "serverId": "84e4e190-e623-4c37-9eda-58b1937c1b53"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bd06b111_ef98addd",
        "filename": "src/model/SubscriptionData.h",
        "patchSetId": 7
      },
      "lineNbr": 27,
      "author": {
        "id": 1000033
      },
      "writtenOn": "2022-12-14T06:52:46Z",
      "side": 1,
      "message": "I think that SubscriptionID should be string.",
      "range": {
        "startLine": 27,
        "startChar": 3,
        "endLine": 27,
        "endChar": 30
      },
      "revId": "67f1a5aba257be730cbec06883e4cdddbcf2cf99",
      "serverId": "84e4e190-e623-4c37-9eda-58b1937c1b53"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b9fb1c39_b8c4594e",
        "filename": "src/model/SubscriptionData.h",
        "patchSetId": 7
      },
      "lineNbr": 27,
      "author": {
        "id": 1001476
      },
      "writtenOn": "2022-12-14T08:35:03Z",
      "side": 1,
      "message": "I already asked about this in a mail thread,\n\nThoralf mentioned that it will be integer only.\n\nAs far as I remember, in subscription response and notification the subscription id is in string.\n\nBut in subscription data the subscription id is in integer.\n\nThis is also mentioned in open api specification of go framework.\n\nI hope you remember the below mail thread; this is the mail that Thoralf had sent\n\nAnssi,\ncan you respond? I presume they are different IDs, one is for the actual subscription ID used between E2 node and RIC (which is also used in E2 indiciation messages, i.e., an integer) and one is for identifying subscription requests (\u003dstring) between xapp and sub mgr.\n\n\nKindly let me know, whether we have to change the subscription ID to string in subscription data model class?",
      "parentUuid": "bd06b111_ef98addd",
      "range": {
        "startLine": 27,
        "startChar": 3,
        "endLine": 27,
        "endChar": 30
      },
      "revId": "67f1a5aba257be730cbec06883e4cdddbcf2cf99",
      "serverId": "84e4e190-e623-4c37-9eda-58b1937c1b53"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f3b2ffec_7bb8a076",
        "filename": "src/model/SubscriptionData.h",
        "patchSetId": 7
      },
      "lineNbr": 27,
      "author": {
        "id": 1001476
      },
      "writtenOn": "2022-12-14T14:16:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b9fb1c39_b8c4594e",
      "range": {
        "startLine": 27,
        "startChar": 3,
        "endLine": 27,
        "endChar": 30
      },
      "revId": "67f1a5aba257be730cbec06883e4cdddbcf2cf99",
      "serverId": "84e4e190-e623-4c37-9eda-58b1937c1b53"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "503ec5e1_84fccced",
        "filename": "src/rest-client/RestClient.cpp",
        "patchSetId": 7
      },
      "lineNbr": 60,
      "author": {
        "id": 1001074
      },
      "writtenOn": "2022-12-13T21:04:30Z",
      "side": 1,
      "message": "To fix the busy wait issue, you could try the following inside a try...catch\nlistener-\u003eopen()-\u003ewait(); // wait is non-blocking here, and the \"callback(request)\" will run on a pplx::task thread.\nThis frees us of dealing with creating/managing an additional thread to receive replies.",
      "range": {
        "startLine": 58,
        "startChar": 24,
        "endLine": 60,
        "endChar": 39
      },
      "revId": "67f1a5aba257be730cbec06883e4cdddbcf2cf99",
      "serverId": "84e4e190-e623-4c37-9eda-58b1937c1b53"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2bc0844e_6876b6eb",
        "filename": "src/rest-client/RestClient.cpp",
        "patchSetId": 7
      },
      "lineNbr": 60,
      "author": {
        "id": 1001476
      },
      "writtenOn": "2022-12-14T14:16:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "503ec5e1_84fccced",
      "range": {
        "startLine": 58,
        "startChar": 24,
        "endLine": 60,
        "endChar": 39
      },
      "revId": "67f1a5aba257be730cbec06883e4cdddbcf2cf99",
      "serverId": "84e4e190-e623-4c37-9eda-58b1937c1b53"
    }
  ]
}