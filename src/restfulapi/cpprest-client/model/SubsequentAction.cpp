/**
 * RIC subscription
 * This is the initial REST API for RIC subscription
 *
 * OpenAPI spec version: 0.0.4
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.27-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "SubsequentAction.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

SubsequentAction::SubsequentAction()
{
    m_SubsequentActionType = utility::conversions::to_string_t("");
    m_TimeToWait = utility::conversions::to_string_t("");
}

SubsequentAction::~SubsequentAction()
{
}

void SubsequentAction::validate()
{
    // TODO: implement validation
    const std::string validActionType[] = {"continue", "wait"};
    if(std::find(std::begin(validActionType), std::end(validActionType), m_SubsequentActionType) \
        == std::end(validActionType))
        INVALID_ARGUMENT(ActionType);

	const std::string validTimeToWait[] = {"zero", "w1ms", "w2ms", "w5ms", "w10ms", "w20ms", \
        "w30ms", "w40ms", "w50ms", "w100ms", "w200ms", "w500ms", "w1s", "w2s", \
        "w5s", "w10s", "w20s", "w60s"};
    if(std::find(std::begin(validTimeToWait), std::end(validTimeToWait), m_TimeToWait) \
        == std::end(validTimeToWait))
        INVALID_ARGUMENT(TimeToWait);

	return;
}

web::json::value SubsequentAction::toJson() const
{
    web::json::value val = web::json::value::object();

    val[utility::conversions::to_string_t("SubsequentActionType")] = ModelBase::toJson(m_SubsequentActionType);
    val[utility::conversions::to_string_t("TimeToWait")] = ModelBase::toJson(m_TimeToWait);

    return val;
}

void SubsequentAction::fromJson(web::json::value& val)
{
    setSubsequentActionType(ModelBase::stringFromJson(val[utility::conversions::to_string_t("SubsequentActionType")]));
    setTimeToWait(ModelBase::stringFromJson(val[utility::conversions::to_string_t("TimeToWait")]));
}

void SubsequentAction::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("SubsequentActionType"), m_SubsequentActionType));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("TimeToWait"), m_TimeToWait));
}

void SubsequentAction::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    setSubsequentActionType(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("SubsequentActionType"))));
    setTimeToWait(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("TimeToWait"))));
}

utility::string_t SubsequentAction::getSubsequentActionType() const
{
    return m_SubsequentActionType;
}


SubsequentAction& SubsequentAction::setSubsequentActionType(utility::string_t value)
{
    m_SubsequentActionType = value;
    return *this;
}
utility::string_t SubsequentAction::getTimeToWait() const
{
    return m_TimeToWait;
}


SubsequentAction& SubsequentAction::setTimeToWait(utility::string_t value)
{
    m_TimeToWait = value;
    return *this;
}
}
}
}
}

