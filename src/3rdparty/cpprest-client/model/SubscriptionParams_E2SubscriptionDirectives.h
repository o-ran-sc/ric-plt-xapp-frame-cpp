/**
 * RIC subscription
 * This is the initial REST API for RIC subscription
 *
 * OpenAPI spec version: 0.0.4
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.27-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * SubscriptionParams_E2SubscriptionDirectives.h
 *
 * Optional. If not set Submgr uses its default values
 */

#ifndef IO_SWAGGER_CLIENT_MODEL_SubscriptionParams_E2SubscriptionDirectives_H_
#define IO_SWAGGER_CLIENT_MODEL_SubscriptionParams_E2SubscriptionDirectives_H_


#include "../ModelBase.h"


namespace io {
namespace swagger {
namespace client {
namespace model {

/// <summary>
/// Optional. If not set Submgr uses its default values
/// </summary>
class  SubscriptionParams_E2SubscriptionDirectives
    : public ModelBase
{
public:
    SubscriptionParams_E2SubscriptionDirectives();
    virtual ~SubscriptionParams_E2SubscriptionDirectives();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// SubscriptionParams_E2SubscriptionDirectives members

    /// <summary>
    /// How long time response is waited from E2 node
    /// </summary>
    int32_t getE2TimeoutTimerValue() const;
    bool e2TimeoutTimerValueIsSet() const;
    SubscriptionParams_E2SubscriptionDirectives& unsetE2TimeoutTimerValue();
    SubscriptionParams_E2SubscriptionDirectives& setE2TimeoutTimerValue(int32_t value);
    /// <summary>
    /// How many times E2 subscription request is retried
    /// </summary>
    int32_t getE2RetryCount() const;
    bool e2RetryCountIsSet() const;
    SubscriptionParams_E2SubscriptionDirectives& unsetE2RetryCount();
    SubscriptionParams_E2SubscriptionDirectives& setE2RetryCount(int32_t value);
    /// <summary>
    /// Subscription needs RMR route from E2Term to xApp
    /// </summary>
    bool isRMRRoutingNeeded() const;
    bool rMRRoutingNeededIsSet() const;
    SubscriptionParams_E2SubscriptionDirectives& unsetRMRRoutingNeeded();
    SubscriptionParams_E2SubscriptionDirectives& setRMRRoutingNeeded(bool value);

protected:
    int32_t m_E2TimeoutTimerValue;
    bool m_E2TimeoutTimerValueIsSet;
    int32_t m_E2RetryCount;
    bool m_E2RetryCountIsSet;
    bool m_RMRRoutingNeeded;
    bool m_RMRRoutingNeededIsSet;
};

}
}
}
}

#endif /* IO_SWAGGER_CLIENT_MODEL_SubscriptionParams_E2SubscriptionDirectives_H_ */
