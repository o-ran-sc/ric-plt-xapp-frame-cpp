/**
 * RIC subscription
 * This is the initial REST API for RIC subscription
 *
 * OpenAPI spec version: 0.0.4
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.27-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "ActionToBeSetup.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

ActionToBeSetup::ActionToBeSetup()
{
    m_ActionID = 0;
    m_ActionType = utility::conversions::to_string_t("");
    m_ActionDefinitionIsSet = false;
    m_SubsequentActionIsSet = false;
}

ActionToBeSetup::~ActionToBeSetup()
{
}

void ActionToBeSetup::validate()
{
    // TODO: implement validation
    if(m_ActionID < 0 || m_ActionID > 255)
       throw std::invalid_argument("Invalid ActionID");

    std::string validActionType[] = {"insert", "policy", "report"};
    if(std::find(std::begin(validActionType), std::end(validActionType), m_ActionType) == std::end(validActionType))
       throw std::invalid_argument("Invalid ActionType");

    if(false == m_ActionDefinitionIsSet)
        throw std::invalid_argument("ActionDefinition is missing");

    if(false == m_SubsequentActionIsSet || !m_SubsequentAction.get())
        throw std::invalid_argument("SubsequentAction is missing");
    else
        m_SubsequentAction->validate();

    return;
}

web::json::value ActionToBeSetup::toJson() const
{
    web::json::value val = web::json::value::object();

    val[utility::conversions::to_string_t("ActionID")] = ModelBase::toJson(m_ActionID);
    val[utility::conversions::to_string_t("ActionType")] = ModelBase::toJson(m_ActionType);
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_ActionDefinition )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        if(jsonArray.size() > 0)
        {
            val[utility::conversions::to_string_t("ActionDefinition")] = web::json::value::array(jsonArray);
        }
    }
    if(m_SubsequentActionIsSet)
    {
        val[utility::conversions::to_string_t("SubsequentAction")] = ModelBase::toJson(m_SubsequentAction);
    }

    return val;
}

void ActionToBeSetup::fromJson(web::json::value& val)
{
    setActionID(ModelBase::int32_tFromJson(val[utility::conversions::to_string_t("ActionID")]));
    setActionType(ModelBase::stringFromJson(val[utility::conversions::to_string_t("ActionType")]));
    {
        m_ActionDefinition.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(utility::conversions::to_string_t("ActionDefinition")))
        {
        for( auto& item : val[utility::conversions::to_string_t("ActionDefinition")].as_array() )
        {
            m_ActionDefinition.push_back(ModelBase::int32_tFromJson(item));
        }
        }
    }
    if(val.has_field(utility::conversions::to_string_t("SubsequentAction")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("SubsequentAction")];
        if(!fieldValue.is_null())
        {
            std::shared_ptr<SubsequentAction> newItem(new SubsequentAction());
            newItem->fromJson(fieldValue);
            setSubsequentAction( newItem );
        }
    }
}

void ActionToBeSetup::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("ActionID"), m_ActionID));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("ActionType"), m_ActionType));
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_ActionDefinition )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("ActionDefinition"), web::json::value::array(jsonArray), utility::conversions::to_string_t("application/json")));
        }
    }
    if(m_SubsequentActionIsSet)
    {
        if (m_SubsequentAction.get())
        {
            m_SubsequentAction->toMultipart(multipart, utility::conversions::to_string_t("SubsequentAction."));
        }
        
    }
}

void ActionToBeSetup::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    setActionID(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("ActionID"))));
    setActionType(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("ActionType"))));
    {
        m_ActionDefinition.clear();
        if(multipart->hasContent(utility::conversions::to_string_t("ActionDefinition")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("ActionDefinition"))));
        for( auto& item : jsonArray.as_array() )
        {
            m_ActionDefinition.push_back(ModelBase::int32_tFromJson(item));
        }
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("SubsequentAction")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("SubsequentAction")))
        {
            std::shared_ptr<SubsequentAction> newItem(new SubsequentAction());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("SubsequentAction."));
            setSubsequentAction( newItem );
        }
    }
}

int32_t ActionToBeSetup::getActionID() const
{
    return m_ActionID;
}


ActionToBeSetup& ActionToBeSetup::setActionID(int32_t value)
{
    m_ActionID = value;
    return *this;
}

utility::string_t ActionToBeSetup::getActionType() const
{
    return m_ActionType;
}


ActionToBeSetup& ActionToBeSetup::setActionType(utility::string_t value)
{
    m_ActionType = value;
    return *this;
}
std::vector<int32_t>& ActionToBeSetup::getActionDefinition()
{
    return m_ActionDefinition;
}

ActionToBeSetup& ActionToBeSetup::setActionDefinition(std::vector<int32_t> value)
{
    m_ActionDefinition = value;
    m_ActionDefinitionIsSet = true;
    return *this;
}
bool ActionToBeSetup::actionDefinitionIsSet() const
{
    return m_ActionDefinitionIsSet;
}

ActionToBeSetup& ActionToBeSetup::unsetActionDefinition()
{
    m_ActionDefinitionIsSet = false;
    return *this;
}

std::shared_ptr<SubsequentAction> ActionToBeSetup::getSubsequentAction() const
{
    return m_SubsequentAction;
}


ActionToBeSetup& ActionToBeSetup::setSubsequentAction(std::shared_ptr<SubsequentAction> value)
{
    m_SubsequentAction = value;
    m_SubsequentActionIsSet = true;
    return *this;
}
bool ActionToBeSetup::subsequentActionIsSet() const
{
    return m_SubsequentActionIsSet;
}

ActionToBeSetup& ActionToBeSetup::unsetSubsequentAction()
{
    m_SubsequentActionIsSet = false;
    return *this;
}

}
}
}
}

