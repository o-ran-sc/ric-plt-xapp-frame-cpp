/**
 * RIC subscription
 * This is the initial REST API for RIC subscription
 *
 * OpenAPI spec version: 0.0.4
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.27-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * SubscriptionInstance.h
 *
 * 
 */

#ifndef IO_SWAGGER_CLIENT_MODEL_SubscriptionInstance_H_
#define IO_SWAGGER_CLIENT_MODEL_SubscriptionInstance_H_


#include "../ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace io {
namespace swagger {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  SubscriptionInstance
    : public ModelBase
{
public:
    SubscriptionInstance();
    virtual ~SubscriptionInstance();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// SubscriptionInstance members

    /// <summary>
    /// 
    /// </summary>
    int32_t getXappEventInstanceId() const;
        SubscriptionInstance& setXappEventInstanceId(int32_t value);
    /// <summary>
    /// 
    /// </summary>
    int32_t getE2EventInstanceId() const;
        SubscriptionInstance& setE2EventInstanceId(int32_t value);
    /// <summary>
    /// Descriptive error cause. Empty string when no error.
    /// </summary>
    utility::string_t getErrorCause() const;
    bool errorCauseIsSet() const;
    SubscriptionInstance& unsetErrorCause();
    SubscriptionInstance& setErrorCause(utility::string_t value);
    /// <summary>
    /// Source of error cause.
    /// </summary>
    utility::string_t getErrorSource() const;
    bool errorSourceIsSet() const;
    SubscriptionInstance& unsetErrorSource();
    SubscriptionInstance& setErrorSource(utility::string_t value);
    /// <summary>
    /// Type timeout. xApp should retry if timeout occurs.
    /// </summary>
    utility::string_t getTimeoutType() const;
    bool timeoutTypeIsSet() const;
    SubscriptionInstance& unsetTimeoutType();
    SubscriptionInstance& setTimeoutType(utility::string_t value);

protected:
    int32_t m_XappEventInstanceId;
        int32_t m_E2EventInstanceId;
        utility::string_t m_ErrorCause;
    bool m_ErrorCauseIsSet;
    utility::string_t m_ErrorSource;
    bool m_ErrorSourceIsSet;
    utility::string_t m_TimeoutType;
    bool m_TimeoutTypeIsSet;
};

}
}
}
}

#endif /* IO_SWAGGER_CLIENT_MODEL_SubscriptionInstance_H_ */
