/**
 * RIC subscription
 * This is the initial REST API for RIC subscription
 *
 * OpenAPI spec version: 0.0.4
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.27-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "SubscriptionDetail.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

SubscriptionDetail::SubscriptionDetail()
{
    m_XappEventInstanceId = 0;
}

SubscriptionDetail::~SubscriptionDetail()
{
}

void SubscriptionDetail::validate()
{
    // TODO: implement validation
    if(m_XappEventInstanceId < 0 || m_XappEventInstanceId > 65535)
        INVALID_ARGUMENT(xappEventInstanceId);

    if(m_EventTriggers.empty())
        INVALID_ARGUMENT(EventTriggers);

    try {
        for(auto it : m_ActionToBeSetupList)
            it->validate();
    }
    catch (const std::invalid_argument& e) {
        INVALID_ARGUMENT(ActionToBeSetup);
    }

    return;
}

web::json::value SubscriptionDetail::toJson() const
{
    web::json::value val = web::json::value::object();

    val[utility::conversions::to_string_t("XappEventInstanceId")] = ModelBase::toJson(m_XappEventInstanceId);
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_EventTriggers )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        val[utility::conversions::to_string_t("EventTriggers")] = web::json::value::array(jsonArray);
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_ActionToBeSetupList )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        val[utility::conversions::to_string_t("ActionToBeSetupList")] = web::json::value::array(jsonArray);
    }

    return val;
}

void SubscriptionDetail::fromJson(web::json::value& val)
{
    setXappEventInstanceId(ModelBase::int32_tFromJson(val[utility::conversions::to_string_t("XappEventInstanceId")]));
    {
        m_EventTriggers.clear();
        std::vector<web::json::value> jsonArray;
        for( auto& item : val[utility::conversions::to_string_t("EventTriggers")].as_array() )
        {
            m_EventTriggers.push_back(ModelBase::int32_tFromJson(item));
        }
    }
    {
        m_ActionToBeSetupList.clear();
        std::vector<web::json::value> jsonArray;
        for( auto& item : val[utility::conversions::to_string_t("ActionToBeSetupList")].as_array() )
        {
            if(item.is_null())
            {
                m_ActionToBeSetupList.push_back( std::shared_ptr<ActionToBeSetup>(nullptr) );
            }
            else
            {
                std::shared_ptr<ActionToBeSetup> newItem(new ActionToBeSetup());
                newItem->fromJson(item);
                m_ActionToBeSetupList.push_back( newItem );
            }
        }
    }
}

void SubscriptionDetail::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("XappEventInstanceId"), m_XappEventInstanceId));
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_EventTriggers )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("EventTriggers"), web::json::value::array(jsonArray), utility::conversions::to_string_t("application/json")));
            }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_ActionToBeSetupList )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("ActionToBeSetupList"), web::json::value::array(jsonArray), utility::conversions::to_string_t("application/json")));
            }
}

void SubscriptionDetail::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    setXappEventInstanceId(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("XappEventInstanceId"))));
    {
        m_EventTriggers.clear();

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("EventTriggers"))));
        for( auto& item : jsonArray.as_array() )
        {
            m_EventTriggers.push_back(ModelBase::int32_tFromJson(item));
        }
    }
    {
        m_ActionToBeSetupList.clear();

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("ActionToBeSetupList"))));
        for( auto& item : jsonArray.as_array() )
        {
            if(item.is_null())
            {
                m_ActionToBeSetupList.push_back( std::shared_ptr<ActionToBeSetup>(nullptr) );
            }
            else
            {
                std::shared_ptr<ActionToBeSetup> newItem(new ActionToBeSetup());
                newItem->fromJson(item);
                m_ActionToBeSetupList.push_back( newItem );
            }
        }
    }
}

int32_t SubscriptionDetail::getXappEventInstanceId() const
{
    return m_XappEventInstanceId;
}


SubscriptionDetail& SubscriptionDetail::setXappEventInstanceId(int32_t value)
{
    m_XappEventInstanceId = value;
    return *this;

}
std::vector<int32_t>& SubscriptionDetail::getEventTriggers()
{
    return m_EventTriggers;
}

SubscriptionDetail& SubscriptionDetail::setEventTriggers(std::vector<int32_t> value)
{
    m_EventTriggers = value;
    return *this;
    
}
std::vector<std::shared_ptr<ActionToBeSetup>>& SubscriptionDetail::getActionToBeSetupList()
{
    return m_ActionToBeSetupList;
}

SubscriptionDetail& SubscriptionDetail::setActionToBeSetupList(std::vector<std::shared_ptr<ActionToBeSetup>> value)
{
    m_ActionToBeSetupList = value;
    return *this;
    
}
}
}
}
}

