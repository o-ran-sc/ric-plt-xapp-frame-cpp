/**
 * RIC subscription
 * This is the initial REST API for RIC subscription
 *
 * OpenAPI spec version: 0.0.4
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.27-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "RegisterData.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

RegisterData::RegisterData()
{
    m_AppName = utility::conversions::to_string_t("");
    m_AppNameIsSet = false;
    m_HttpEndpoint = utility::conversions::to_string_t("");
    m_HttpEndpointIsSet = false;
    m_RmrEndpoint = utility::conversions::to_string_t("");
    m_RmrEndpointIsSet = false;
    m_AppInstanceName = utility::conversions::to_string_t("");
    m_AppInstanceNameIsSet = false;
    m_AppVersion = utility::conversions::to_string_t("");
    m_AppVersionIsSet = false;
    m_ConfigPath = utility::conversions::to_string_t("");
    m_ConfigPathIsSet = false;
    m_Config = utility::conversions::to_string_t("");
    m_ConfigIsSet = false;
}

RegisterData::~RegisterData()
{
}

void RegisterData::validate()
{
    // TODO: implement validation
}

web::json::value RegisterData::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_AppNameIsSet)
    {
        val[utility::conversions::to_string_t("appName")] = ModelBase::toJson(m_AppName);
    }
    if(m_HttpEndpointIsSet)
    {
        val[utility::conversions::to_string_t("httpEndpoint")] = ModelBase::toJson(m_HttpEndpoint);
    }
    if(m_RmrEndpointIsSet)
    {
        val[utility::conversions::to_string_t("rmrEndpoint")] = ModelBase::toJson(m_RmrEndpoint);
    }
    if(m_AppInstanceNameIsSet)
    {
        val[utility::conversions::to_string_t("appInstanceName")] = ModelBase::toJson(m_AppInstanceName);
    }
    if(m_AppVersionIsSet)
    {
        val[utility::conversions::to_string_t("appVersion")] = ModelBase::toJson(m_AppVersion);
    }
    if(m_ConfigPathIsSet)
    {
        val[utility::conversions::to_string_t("configPath")] = ModelBase::toJson(m_ConfigPath);
    }
    if(m_ConfigIsSet)
    {
        val[utility::conversions::to_string_t("config")] = ModelBase::toJson(m_Config);
    }
    std::cout << "Register json: " << val << std::endl;

    return val;
}

void RegisterData::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("appName")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("appName")];
        if(!fieldValue.is_null())
        {
            setAppName(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("httpEndpoint")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("httpEndpoint")];
        if(!fieldValue.is_null())
        {
            setHttpEndpoint(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("rmrEndpoint")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("rmrEndpoint")];
        if(!fieldValue.is_null())
        {
            setRmrEndpoint(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("appInstanceName")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("appInstanceName")];
        if(!fieldValue.is_null())
        {
            setAppInstanceName(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("appVersion")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("appVersion")];
        if(!fieldValue.is_null())
        {
            setAppVersion(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("configPath")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("configPath")];
        if(!fieldValue.is_null())
        {
            setConfigPath(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("config")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("config")];
        if(!fieldValue.is_null())
        {
            setConfig(ModelBase::stringFromJson(fieldValue));
        }
    }
}

void RegisterData::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_AppNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("appName"), m_AppName));
        
    }
    if(m_HttpEndpointIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("httpEndpoint"), m_HttpEndpoint));
        
    }
    if(m_RmrEndpointIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("rmrEndpoint"), m_RmrEndpoint));
        
    }
    if(m_AppInstanceNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("appInstanceName"), m_AppInstanceName));
        
    }
    if(m_AppVersionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("appVersion"), m_AppVersion));
        
    }
    if(m_ConfigPathIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("configPath"), m_ConfigPath));
        
    }
    if(m_ConfigIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("config"), m_Config));
        
    }
}

void RegisterData::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("appName")))
    {
        setAppName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("appName"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("httpEndpoint")))
    {
        setHttpEndpoint(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("httpEndpoint"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("rmrEndpoint")))
    {
        setRmrEndpoint(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("rmrEndpoint"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("appInstanceName")))
    {
        setAppInstanceName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("appInstanceName"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("appVersion")))
    {
        setAppVersion(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("appVersion"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("configPath")))
    {
        setConfigPath(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("configPath"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("config")))
    {
        setConfig(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("config"))));
    }
}

utility::string_t RegisterData::getAppName() const
{
    return m_AppName;
}


RegisterData& RegisterData::setAppName(utility::string_t value)
{
    m_AppName = value;
    m_AppNameIsSet = true;
}
bool RegisterData::appNameIsSet() const
{
    return m_AppNameIsSet;
}

void RegisterData::unsetAppName()
{
    m_AppNameIsSet = false;
}

utility::string_t RegisterData::getHttpEndpoint() const
{
    return m_HttpEndpoint;
}


RegisterData& RegisterData::setHttpEndpoint(utility::string_t value)
{
    m_HttpEndpoint = value;
    m_HttpEndpointIsSet = true;
}
bool RegisterData::httpEndpointIsSet() const
{
    return m_HttpEndpointIsSet;
}

void RegisterData::unsetHttpEndpoint()
{
    m_HttpEndpointIsSet = false;
}

utility::string_t RegisterData::getRmrEndpoint() const
{
    return m_RmrEndpoint;
}


RegisterData& RegisterData::setRmrEndpoint(utility::string_t value)
{
    m_RmrEndpoint = value;
    m_RmrEndpointIsSet = true;
}
bool RegisterData::rmrEndpointIsSet() const
{
    return m_RmrEndpointIsSet;
}

void RegisterData::unsetRmrEndpoint()
{
    m_RmrEndpointIsSet = false;
}

utility::string_t RegisterData::getAppInstanceName() const
{
    return m_AppInstanceName;
}


RegisterData& RegisterData::setAppInstanceName(utility::string_t value)
{
    m_AppInstanceName = value;
    m_AppInstanceNameIsSet = true;
}
bool RegisterData::appInstanceNameIsSet() const
{
    return m_AppInstanceNameIsSet;
}

void RegisterData::unsetAppInstanceName()
{
    m_AppInstanceNameIsSet = false;
}

utility::string_t RegisterData::getAppVersion() const
{
    return m_AppVersion;
}


RegisterData& RegisterData::setAppVersion(utility::string_t value)
{
    m_AppVersion = value;
    m_AppVersionIsSet = true;
}
bool RegisterData::appVersionIsSet() const
{
    return m_AppVersionIsSet;
}

void RegisterData::unsetAppVersion()
{
    m_AppVersionIsSet = false;
}

utility::string_t RegisterData::getConfigPath() const
{
    return m_ConfigPath;
}


RegisterData& RegisterData::setConfigPath(utility::string_t value)
{
    m_ConfigPath = value;
    m_ConfigPathIsSet = true;
}
bool RegisterData::configPathIsSet() const
{
    return m_ConfigPathIsSet;
}

void RegisterData::unsetConfigPath()
{
    m_ConfigPathIsSet = false;
}

utility::string_t RegisterData::getConfig() const
{
    return m_Config;
}


RegisterData& RegisterData::setConfig(utility::string_t value)
{
    m_Config = value;
    m_ConfigIsSet = true;
}
bool RegisterData::configIsSet() const
{
    return m_ConfigIsSet;
}

void RegisterData::unsetConfig()
{
    m_ConfigIsSet = false;
}

}
}
}
}

