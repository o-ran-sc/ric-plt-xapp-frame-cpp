/**
 * RIC subscription
 * This is the initial REST API for RIC subscription
 *
 * OpenAPI spec version: 0.0.4
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.27-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "SubscriptionData.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

SubscriptionData::SubscriptionData()
{
    m_SubscriptionId = 0;
    m_SubscriptionIdIsSet = false;
    m_Meid = utility::conversions::to_string_t("");
    m_MeidIsSet = false;
    m_ClientEndpointIsSet = false;
    m_SubscriptionInstancesIsSet = false;
}

SubscriptionData::~SubscriptionData()
{
}

void SubscriptionData::validate()
{
    // TODO: implement validation
    if(m_SubscriptionId < 0 || m_SubscriptionId > 65535 || false == m_SubscriptionIdIsSet)
        INVALID_ARGUMENT(SubscriptionId);

    if(false == m_MeidIsSet || m_Meid.empty())
        INVALID_ARGUMENT(Meid);

    if(false == m_ClientEndpointIsSet)
        INVALID_ARGUMENT(ClientEndpoint);

    if(false == m_SubscriptionInstancesIsSet)
        INVALID_ARGUMENT(SubscriptionInstances);
    else
    {
        try {
            for(auto it : m_SubscriptionInstances)
                it->validate();
        }
        catch(const std::invalid_argument& e) {
            INVALID_ARGUMENT(SubscriptionInstances);
        }
    }

    return;
}

web::json::value SubscriptionData::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_SubscriptionIdIsSet)
    {
        val[utility::conversions::to_string_t("SubscriptionId")] = ModelBase::toJson(m_SubscriptionId);
    }
    if(m_MeidIsSet)
    {
        val[utility::conversions::to_string_t("Meid")] = ModelBase::toJson(m_Meid);
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_ClientEndpoint )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        if(jsonArray.size() > 0)
        {
            val[utility::conversions::to_string_t("ClientEndpoint")] = web::json::value::array(jsonArray);
        }
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_SubscriptionInstances )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        if(jsonArray.size() > 0)
        {
            val[utility::conversions::to_string_t("SubscriptionInstances")] = web::json::value::array(jsonArray);
        }
    }

    return val;
}

void SubscriptionData::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("SubscriptionId")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("SubscriptionId")];
        if(!fieldValue.is_null())
        {
            setSubscriptionId(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("Meid")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("Meid")];
        if(!fieldValue.is_null())
        {
            setMeid(ModelBase::stringFromJson(fieldValue));
        }
    }
    {
        m_ClientEndpoint.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(utility::conversions::to_string_t("ClientEndpoint")))
        {
        for( auto& item : val[utility::conversions::to_string_t("ClientEndpoint")].as_array() )
        {
            m_ClientEndpoint.push_back(ModelBase::stringFromJson(item));
        }
        }
    }
    {
        m_SubscriptionInstances.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(utility::conversions::to_string_t("SubscriptionInstances")))
        {
        for( auto& item : val[utility::conversions::to_string_t("SubscriptionInstances")].as_array() )
        {
            if(item.is_null())
            {
                m_SubscriptionInstances.push_back( std::shared_ptr<SubscriptionInstance>(nullptr) );
            }
            else
            {
                std::shared_ptr<SubscriptionInstance> newItem(new SubscriptionInstance());
                newItem->fromJson(item);
                m_SubscriptionInstances.push_back( newItem );
            }
        }
        }
    }
}

void SubscriptionData::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_SubscriptionIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("SubscriptionId"), m_SubscriptionId));
    }
    if(m_MeidIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("Meid"), m_Meid));
        
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_ClientEndpoint )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("ClientEndpoint"), web::json::value::array(jsonArray), utility::conversions::to_string_t("application/json")));
        }
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_SubscriptionInstances )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("SubscriptionInstances"), web::json::value::array(jsonArray), utility::conversions::to_string_t("application/json")));
        }
    }
}

void SubscriptionData::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("SubscriptionId")))
    {
        setSubscriptionId(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("SubscriptionId"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("Meid")))
    {
        setMeid(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("Meid"))));
    }
    {
        m_ClientEndpoint.clear();
        if(multipart->hasContent(utility::conversions::to_string_t("ClientEndpoint")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("ClientEndpoint"))));
        for( auto& item : jsonArray.as_array() )
        {
            m_ClientEndpoint.push_back(ModelBase::stringFromJson(item));
        }
        }
    }
    {
        m_SubscriptionInstances.clear();
        if(multipart->hasContent(utility::conversions::to_string_t("SubscriptionInstances")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("SubscriptionInstances"))));
        for( auto& item : jsonArray.as_array() )
        {
            if(item.is_null())
            {
                m_SubscriptionInstances.push_back( std::shared_ptr<SubscriptionInstance>(nullptr) );
            }
            else
            {
                std::shared_ptr<SubscriptionInstance> newItem(new SubscriptionInstance());
                newItem->fromJson(item);
                m_SubscriptionInstances.push_back( newItem );
            }
        }
        }
    }
}

int32_t SubscriptionData::getSubscriptionId() const
{
    return m_SubscriptionId;
}


SubscriptionData& SubscriptionData::setSubscriptionId(int32_t value)
{
    m_SubscriptionId = value;
    m_SubscriptionIdIsSet = true;
    return *this;
}
bool SubscriptionData::subscriptionIdIsSet() const
{
    return m_SubscriptionIdIsSet;
}

SubscriptionData& SubscriptionData::unsetSubscriptionId()
{
    m_SubscriptionIdIsSet = false;
    return *this;
}

utility::string_t SubscriptionData::getMeid() const
{
    return m_Meid;
}


SubscriptionData& SubscriptionData::setMeid(utility::string_t value)
{
    m_Meid = value;
    m_MeidIsSet = true;
    return *this;
}
bool SubscriptionData::meidIsSet() const
{
    return m_MeidIsSet;
}

SubscriptionData& SubscriptionData::unsetMeid()
{
    m_MeidIsSet = false;
    return *this;
}

std::vector<utility::string_t>& SubscriptionData::getClientEndpoint()
{
    return m_ClientEndpoint;
}

SubscriptionData& SubscriptionData::setClientEndpoint(std::vector<utility::string_t> value)
{
    m_ClientEndpoint = value;
    m_ClientEndpointIsSet = true;
    return *this;
}
bool SubscriptionData::clientEndpointIsSet() const
{
    return m_ClientEndpointIsSet;
}

SubscriptionData& SubscriptionData::unsetClientEndpoint()
{
    m_ClientEndpointIsSet = false;
    return *this;
}

std::vector<std::shared_ptr<SubscriptionInstance>>& SubscriptionData::getSubscriptionInstances()
{
    return m_SubscriptionInstances;
}

SubscriptionData& SubscriptionData::setSubscriptionInstances(std::vector<std::shared_ptr<SubscriptionInstance>> value)
{
    m_SubscriptionInstances = value;
    m_SubscriptionInstancesIsSet = true;
    return *this;
}
bool SubscriptionData::subscriptionInstancesIsSet() const
{
    return m_SubscriptionInstancesIsSet;
}

SubscriptionData& SubscriptionData::unsetSubscriptionInstances()
{
    m_SubscriptionInstancesIsSet = false;
    return *this;
}

}
}
}
}

