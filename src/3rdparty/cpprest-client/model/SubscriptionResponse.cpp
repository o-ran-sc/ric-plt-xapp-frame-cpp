/**
 * RIC subscription
 * This is the initial REST API for RIC subscription
 *
 * OpenAPI spec version: 0.0.4
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.27-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "SubscriptionResponse.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

SubscriptionResponse::SubscriptionResponse()
{
    m_SubscriptionId = utility::conversions::to_string_t("");
    m_SubscriptionInstances = utility::conversions::to_string_t("");
}

SubscriptionResponse::~SubscriptionResponse()
{
}

void SubscriptionResponse::validate()
{
    // TODO: implement validation
    if(m_SubscriptionId.empty())
        INVALID_ARGUMENT(SubscriptionId);

    if(m_SubscriptionInstances.empty())
        INVALID_ARGUMENT(SubscriptionInstances);

    return;
}

web::json::value SubscriptionResponse::toJson() const
{
    web::json::value val = web::json::value::object();

    val[utility::conversions::to_string_t("SubscriptionId")] = ModelBase::toJson(m_SubscriptionId);
    val[utility::conversions::to_string_t("SubscriptionInstances")] = ModelBase::toJson(m_SubscriptionInstances);

    return val;
}

void SubscriptionResponse::fromJson(web::json::value& val)
{
    setSubscriptionId(ModelBase::stringFromJson(val[utility::conversions::to_string_t("SubscriptionId")]));
    setSubscriptionInstances(ModelBase::stringFromJson(val[utility::conversions::to_string_t("SubscriptionInstances")]));
}

void SubscriptionResponse::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("SubscriptionId"), m_SubscriptionId));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("SubscriptionInstances"), m_SubscriptionInstances));
}

void SubscriptionResponse::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    setSubscriptionId(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("SubscriptionId"))));
    setSubscriptionInstances(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("SubscriptionInstances")))); 
}

utility::string_t SubscriptionResponse::getSubscriptionId() const
{
    return m_SubscriptionId;
}


SubscriptionResponse& SubscriptionResponse::setSubscriptionId(utility::string_t value)
{
    m_SubscriptionId = value;
    return *this;
}
utility::string_t SubscriptionResponse::getSubscriptionInstances() const
{
    return m_SubscriptionInstances;
}

SubscriptionResponse& SubscriptionResponse::setSubscriptionInstances(utility::string_t value)
{
    m_SubscriptionInstances = value;
    return *this;
}
}
}
}
}

