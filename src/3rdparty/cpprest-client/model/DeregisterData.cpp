/**
 * RIC subscription
 * This is the initial REST API for RIC subscription
 *
 * OpenAPI spec version: 0.0.4
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.27-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "DeregisterData.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

DeregisterData::DeregisterData()
{
    m_AppName = utility::conversions::to_string_t("");
    m_AppNameIsSet = false;
    m_AppInstanceName = utility::conversions::to_string_t("");
    m_AppInstanceNameIsSet = false;
}

DeregisterData::~DeregisterData()
{
}

void DeregisterData::validate()
{
    // TODO: implement validation
}

web::json::value DeregisterData::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_AppNameIsSet)
    {
        val[utility::conversions::to_string_t("appName")] = ModelBase::toJson(m_AppName);
    }
    if(m_AppInstanceNameIsSet)
    {
        val[utility::conversions::to_string_t("appInstanceName")] = ModelBase::toJson(m_AppInstanceName);
    }

    return val;
}

void DeregisterData::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("appName")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("appName")];
        if(!fieldValue.is_null())
        {
            setAppName(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("appInstanceName")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("appInstanceName")];
        if(!fieldValue.is_null())
        {
            setAppInstanceName(ModelBase::stringFromJson(fieldValue));
        }
    }
}

void DeregisterData::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_AppNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("appName"), m_AppName));
        
    }
    if(m_AppInstanceNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("appInstanceName"), m_AppInstanceName));
        
    }
}

void DeregisterData::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("appName")))
    {
        setAppName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("appName"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("appInstanceName")))
    {
        setAppInstanceName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("appInstanceName"))));
    }
}

utility::string_t DeregisterData::getAppName() const
{
    return m_AppName;
}


DeregisterData& DeregisterData::setAppName(utility::string_t value)
{
    m_AppName = value;
    m_AppNameIsSet = true;
    return *this;
}
bool DeregisterData::appNameIsSet() const
{
    return m_AppNameIsSet;
}

void DeregisterData::unsetAppName()
{
    m_AppNameIsSet = false;
}

utility::string_t DeregisterData::getAppInstanceName() const
{
    return m_AppInstanceName;
}


DeregisterData& DeregisterData::setAppInstanceName(utility::string_t value)
{
    m_AppInstanceName = value;
    m_AppInstanceNameIsSet = true;
    return *this;
}
bool DeregisterData::appInstanceNameIsSet() const
{
    return m_AppInstanceNameIsSet;
}

void DeregisterData::unsetAppInstanceName()
{
    m_AppInstanceNameIsSet = false;
}

}
}
}
}

