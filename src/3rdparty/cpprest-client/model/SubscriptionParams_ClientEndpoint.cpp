/**
 * RIC subscription
 * This is the initial REST API for RIC subscription
 *
 * OpenAPI spec version: 0.0.4
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.27-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "SubscriptionParams_ClientEndpoint.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

SubscriptionParams_ClientEndpoint::SubscriptionParams_ClientEndpoint()
{
    m_Host = utility::conversions::to_string_t("");
    m_HostIsSet = false;
    m_HTTPPort = 0;
    m_HTTPPortIsSet = false;
    m_RMRPort = 0;
    m_RMRPortIsSet = false;
}

SubscriptionParams_ClientEndpoint::~SubscriptionParams_ClientEndpoint()
{
}

void SubscriptionParams_ClientEndpoint::validate()
{
    // TODO: implement validation
    if(m_Host.empty())
        INVALID_ARGUMENT(Host);

    if(m_HTTPPort < 0 || m_HTTPPort > 65535)
        INVALID_ARGUMENT(HTTPPort);

    if(m_RMRPort < 0 || m_RMRPort > 65535)
        INVALID_ARGUMENT(RMRPort);

    return;
}

web::json::value SubscriptionParams_ClientEndpoint::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_HostIsSet)
    {
        val[utility::conversions::to_string_t("Host")] = ModelBase::toJson(m_Host);
    }
    if(m_HTTPPortIsSet)
    {
        val[utility::conversions::to_string_t("HTTPPort")] = ModelBase::toJson(m_HTTPPort);
    }
    if(m_RMRPortIsSet)
    {
        val[utility::conversions::to_string_t("RMRPort")] = ModelBase::toJson(m_RMRPort);
    }

    return val;
}

void SubscriptionParams_ClientEndpoint::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("Host")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("Host")];
        if(!fieldValue.is_null())
        {
            setHost(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("HTTPPort")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("HTTPPort")];
        if(!fieldValue.is_null())
        {
            setHTTPPort(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("RMRPort")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("RMRPort")];
        if(!fieldValue.is_null())
        {
            setRMRPort(ModelBase::int32_tFromJson(fieldValue));
        }
    }
}

void SubscriptionParams_ClientEndpoint::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_HostIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("Host"), m_Host));
        
    }
    if(m_HTTPPortIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("HTTPPort"), m_HTTPPort));
    }
    if(m_RMRPortIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("RMRPort"), m_RMRPort));
    }
}

void SubscriptionParams_ClientEndpoint::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("Host")))
    {
        setHost(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("Host"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("HTTPPort")))
    {
        setHTTPPort(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("HTTPPort"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("RMRPort")))
    {
        setRMRPort(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("RMRPort"))));
    }
}

utility::string_t SubscriptionParams_ClientEndpoint::getHost() const
{
    return m_Host;
}


SubscriptionParams_ClientEndpoint& SubscriptionParams_ClientEndpoint::setHost(utility::string_t value)
{
    m_Host = value;
    m_HostIsSet = true;
    return *this;
}
bool SubscriptionParams_ClientEndpoint::hostIsSet() const
{
    return m_HostIsSet;
}

SubscriptionParams_ClientEndpoint& SubscriptionParams_ClientEndpoint::unsetHost()
{
    m_HostIsSet = false;
    return *this;
}

int32_t SubscriptionParams_ClientEndpoint::getHTTPPort() const
{
    return m_HTTPPort;
}


SubscriptionParams_ClientEndpoint& SubscriptionParams_ClientEndpoint::setHTTPPort(int32_t value)
{
    m_HTTPPort = value;
    m_HTTPPortIsSet = true;
    return *this;
}
bool SubscriptionParams_ClientEndpoint::hTTPPortIsSet() const
{
    return m_HTTPPortIsSet;
}

SubscriptionParams_ClientEndpoint& SubscriptionParams_ClientEndpoint::unsetHTTPPort()
{
    m_HTTPPortIsSet = false;
    return *this;
}

int32_t SubscriptionParams_ClientEndpoint::getRMRPort() const
{
    return m_RMRPort;
}


SubscriptionParams_ClientEndpoint& SubscriptionParams_ClientEndpoint::setRMRPort(int32_t value)
{
    m_RMRPort = value;
    m_RMRPortIsSet = true;
    return *this;
}
bool SubscriptionParams_ClientEndpoint::rMRPortIsSet() const
{
    return m_RMRPortIsSet;
}

SubscriptionParams_ClientEndpoint& SubscriptionParams_ClientEndpoint::unsetRMRPort()
{
    m_RMRPortIsSet = false;
    return *this;
}

}
}
}
}

