/**
 * RIC subscription
 * This is the initial REST API for RIC subscription
 *
 * OpenAPI spec version: 0.0.4
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.27-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "SubscriptionParams_E2SubscriptionDirectives.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

SubscriptionParams_E2SubscriptionDirectives::SubscriptionParams_E2SubscriptionDirectives()
{
    m_E2TimeoutTimerValue = 0;
    m_E2TimeoutTimerValueIsSet = false;
    m_E2RetryCount = 0;
    m_E2RetryCountIsSet = false;
    m_RMRRoutingNeeded = false;
    m_RMRRoutingNeededIsSet = false;
}

SubscriptionParams_E2SubscriptionDirectives::~SubscriptionParams_E2SubscriptionDirectives()
{
}

void SubscriptionParams_E2SubscriptionDirectives::validate()
{
    // TODO: implement validation
    if(m_E2TimeoutTimerValue < 0 || m_E2TimeoutTimerValue > 10)
        INVALID_ARGUMENT(E2TimeoutTimerValue);

    if(m_E2RetryCount < 0 || m_E2RetryCount > 10)
        INVALID_ARGUMENT(E2RetryCount);

    return;
}

web::json::value SubscriptionParams_E2SubscriptionDirectives::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_E2TimeoutTimerValueIsSet)
    {
        val[utility::conversions::to_string_t("E2TimeoutTimerValue")] = ModelBase::toJson(m_E2TimeoutTimerValue);
    }
    if(m_E2RetryCountIsSet)
    {
        val[utility::conversions::to_string_t("E2RetryCount")] = ModelBase::toJson(m_E2RetryCount);
    }
    if(m_RMRRoutingNeededIsSet)
    {
        val[utility::conversions::to_string_t("RMRRoutingNeeded")] = ModelBase::toJson(m_RMRRoutingNeeded);
    }

    return val;
}

void SubscriptionParams_E2SubscriptionDirectives::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("E2TimeoutTimerValue")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("E2TimeoutTimerValue")];
        if(!fieldValue.is_null())
        {
            setE2TimeoutTimerValue(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("E2RetryCount")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("E2RetryCount")];
        if(!fieldValue.is_null())
        {
            setE2RetryCount(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("RMRRoutingNeeded")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("RMRRoutingNeeded")];
        if(!fieldValue.is_null())
        {
            setRMRRoutingNeeded(ModelBase::boolFromJson(fieldValue));
        }
    }
}

void SubscriptionParams_E2SubscriptionDirectives::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_E2TimeoutTimerValueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("E2TimeoutTimerValue"), m_E2TimeoutTimerValue));
    }
    if(m_E2RetryCountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("E2RetryCount"), m_E2RetryCount));
    }
    if(m_RMRRoutingNeededIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("RMRRoutingNeeded"), m_RMRRoutingNeeded));
    }
}

void SubscriptionParams_E2SubscriptionDirectives::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("E2TimeoutTimerValue")))
    {
        setE2TimeoutTimerValue(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("E2TimeoutTimerValue"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("E2RetryCount")))
    {
        setE2RetryCount(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("E2RetryCount"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("RMRRoutingNeeded")))
    {
        setRMRRoutingNeeded(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("RMRRoutingNeeded"))));
    }
}

int32_t SubscriptionParams_E2SubscriptionDirectives::getE2TimeoutTimerValue() const
{
    return m_E2TimeoutTimerValue;
}


SubscriptionParams_E2SubscriptionDirectives& SubscriptionParams_E2SubscriptionDirectives::setE2TimeoutTimerValue(int32_t value)
{
    m_E2TimeoutTimerValue = value;
    m_E2TimeoutTimerValueIsSet = true;
    return *this;
}
bool SubscriptionParams_E2SubscriptionDirectives::e2TimeoutTimerValueIsSet() const
{
    return m_E2TimeoutTimerValueIsSet;
}

SubscriptionParams_E2SubscriptionDirectives& SubscriptionParams_E2SubscriptionDirectives::unsetE2TimeoutTimerValue()
{
    m_E2TimeoutTimerValueIsSet = false;
    return *this;
}

int32_t SubscriptionParams_E2SubscriptionDirectives::getE2RetryCount() const
{
    return m_E2RetryCount;
}


SubscriptionParams_E2SubscriptionDirectives& SubscriptionParams_E2SubscriptionDirectives::setE2RetryCount(int32_t value)
{
    m_E2RetryCount = value;
    m_E2RetryCountIsSet = true;
    return *this;
}
bool SubscriptionParams_E2SubscriptionDirectives::e2RetryCountIsSet() const
{
    return m_E2RetryCountIsSet;
}

SubscriptionParams_E2SubscriptionDirectives& SubscriptionParams_E2SubscriptionDirectives::unsetE2RetryCount()
{
    m_E2RetryCountIsSet = false;
    return *this;
}

bool SubscriptionParams_E2SubscriptionDirectives::isRMRRoutingNeeded() const
{
    return m_RMRRoutingNeeded;
}


SubscriptionParams_E2SubscriptionDirectives& SubscriptionParams_E2SubscriptionDirectives::setRMRRoutingNeeded(bool value)
{
    m_RMRRoutingNeeded = value;
    m_RMRRoutingNeededIsSet = true;
    return *this;
}
bool SubscriptionParams_E2SubscriptionDirectives::rMRRoutingNeededIsSet() const
{
    return m_RMRRoutingNeededIsSet;
}

SubscriptionParams_E2SubscriptionDirectives& SubscriptionParams_E2SubscriptionDirectives::unsetRMRRoutingNeeded()
{
    m_RMRRoutingNeededIsSet = false;
    return *this;
}

}
}
}
}

