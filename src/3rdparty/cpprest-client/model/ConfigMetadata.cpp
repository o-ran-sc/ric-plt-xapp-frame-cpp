/**
 * RIC subscription
 * This is the initial REST API for RIC subscription
 *
 * OpenAPI spec version: 0.0.4
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.27-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "ConfigMetadata.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

ConfigMetadata::ConfigMetadata()
{
    m_XappName = utility::conversions::to_string_t("");
    m_ConfigType = utility::conversions::to_string_t("");
}

ConfigMetadata::~ConfigMetadata()
{
}

void ConfigMetadata::validate()
{
    // TODO: implement validation
    if(m_XappName.empty())
        INVALID_ARGUMENT(XappName);

    if(m_ConfigType.empty())
        INVALID_ARGUMENT(ConfigType);
    else if(0 != m_ConfigType.compare("json") && 0 != m_ConfigType.compare("xml"))
        INVALID_ARGUMENT(ConfigType);

    return;
}

web::json::value ConfigMetadata::toJson() const
{
    web::json::value val = web::json::value::object();

    val[utility::conversions::to_string_t("xappName")] = ModelBase::toJson(m_XappName);
    val[utility::conversions::to_string_t("configType")] = ModelBase::toJson(m_ConfigType);

    return val;
}

void ConfigMetadata::fromJson(web::json::value& val)
{
    setXappName(ModelBase::stringFromJson(val[utility::conversions::to_string_t("xappName")]));
    setConfigType(ModelBase::stringFromJson(val[utility::conversions::to_string_t("configType")]));
}

void ConfigMetadata::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("xappName"), m_XappName));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("configType"), m_ConfigType));
}

void ConfigMetadata::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    setXappName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("xappName"))));
    setConfigType(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("configType"))));
}

utility::string_t ConfigMetadata::getXappName() const
{
    return m_XappName;
}


ConfigMetadata& ConfigMetadata::setXappName(utility::string_t value)
{
    m_XappName = value;
    return *this;
}
utility::string_t ConfigMetadata::getConfigType() const
{
    return m_ConfigType;
}


ConfigMetadata& ConfigMetadata::setConfigType(utility::string_t value)
{
    m_ConfigType = value;
    return *this;
}
}
}
}
}

