/**
 * RIC subscription
 * This is the initial REST API for RIC subscription
 *
 * OpenAPI spec version: 0.0.4
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.27-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * ActionToBeSetup.h
 *
 * 
 */

#ifndef IO_SWAGGER_CLIENT_MODEL_ActionToBeSetup_H_
#define IO_SWAGGER_CLIENT_MODEL_ActionToBeSetup_H_


#include "../ModelBase.h"

#include "SubsequentAction.h"
#include <cpprest/details/basic_types.h>
#include <vector>

namespace io {
namespace swagger {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  ActionToBeSetup
    : public ModelBase
{
public:
    ActionToBeSetup();
    virtual ~ActionToBeSetup();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// ActionToBeSetup members

    /// <summary>
    /// 
    /// </summary>
    int32_t getActionID() const;
    ActionToBeSetup& setActionID(int32_t value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getActionType() const;
    ActionToBeSetup& setActionType(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    std::vector<int32_t>& getActionDefinition();
    bool actionDefinitionIsSet() const;
    ActionToBeSetup& unsetActionDefinition();
    ActionToBeSetup& setActionDefinition(std::vector<int32_t> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<SubsequentAction> getSubsequentAction() const;
    bool subsequentActionIsSet() const;
    ActionToBeSetup& unsetSubsequentAction();
    ActionToBeSetup& setSubsequentAction(std::shared_ptr<SubsequentAction> value);

protected:
    int32_t m_ActionID;
        utility::string_t m_ActionType;
        std::vector<int32_t> m_ActionDefinition;
    bool m_ActionDefinitionIsSet;
    std::shared_ptr<SubsequentAction> m_SubsequentAction;
    bool m_SubsequentActionIsSet;
};

}
}
}
}

#endif /* IO_SWAGGER_CLIENT_MODEL_ActionToBeSetup_H_ */
